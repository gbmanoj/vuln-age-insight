
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  AlertTriangle, 
  Shield, 
  Activity, 
  TrendingUp, 
  Clock,
  Target,
  AlertCircle
} from 'lucide-react';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

interface VulnerabilitySummaryProps {
  summary: {
    critical: number;
    high: number;
    medium: number;
    low: number;
    informational: number;
    total: number;
  };
  hostCount: number;
  scanDate: Date;
}

export const VulnerabilitySummary = ({ summary, hostCount, scanDate }: VulnerabilitySummaryProps) => {
  const severityData = [
    { name: 'Critical', value: summary.critical, color: '#ef4444' },
    { name: 'High', value: summary.high, color: '#f97316' },
    { name: 'Medium', value: summary.medium, color: '#eab308' },
    { name: 'Low', value: summary.low, color: '#22c55e' },
    { name: 'Info', value: summary.informational, color: '#64748b' }
  ].filter(item => item.value > 0);

  const riskScore = calculateOverallRiskScore(summary);
  const criticalPercentage = summary.total > 0 ? Math.round((summary.critical / summary.total) * 100) : 0;
  const highPercentage = summary.total > 0 ? Math.round((summary.high / summary.total) * 100) : 0;

  return (
    <div className="space-y-6">
      {/* Risk Overview Alert */}
      {(summary.critical > 0 || summary.high > 10) && (
        <Alert className="border-red-500/50 bg-red-950/20">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            <span className="font-medium">High Risk Environment Detected:</span> 
            {summary.critical > 0 && ` ${summary.critical} critical vulnerabilities`}
            {summary.critical > 0 && summary.high > 10 && ' and'}
            {summary.high > 10 && ` ${summary.high} high-severity issues`} 
            {' '}require immediate attention.
          </AlertDescription>
        </Alert>
      )}

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-gradient-to-br from-red-900/30 to-red-800/20 border border-red-500/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-red-300">Critical</p>
                <p className="text-2xl font-bold text-red-400">{summary.critical}</p>
              </div>
              <AlertCircle className="h-8 w-8 text-red-400" />
            </div>
            <div className="mt-2">
              <Progress value={criticalPercentage} className="h-2" />
              <p className="text-xs text-red-300 mt-1">{criticalPercentage}% of total</p>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-orange-900/30 to-orange-800/20 border border-orange-500/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-orange-300">High</p>
                <p className="text-2xl font-bold text-orange-400">{summary.high}</p>
              </div>
              <AlertTriangle className="h-8 w-8 text-orange-400" />
            </div>
            <div className="mt-2">
              <Progress value={highPercentage} className="h-2" />
              <p className="text-xs text-orange-300 mt-1">{highPercentage}% of total</p>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-blue-900/30 to-blue-800/20 border border-blue-500/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-blue-300">Total Vulns</p>
                <p className="text-2xl font-bold text-blue-400">{summary.total}</p>
              </div>
              <Shield className="h-8 w-8 text-blue-400" />
            </div>
            <div className="mt-2">
              <p className="text-xs text-blue-300">Across {hostCount} hosts</p>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-900/30 to-purple-800/20 border border-purple-500/20">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-purple-300">Risk Score</p>
                <p className="text-2xl font-bold text-purple-400">{riskScore.toFixed(1)}</p>
              </div>
              <Activity className="h-8 w-8 text-purple-400" />
            </div>
            <div className="mt-2">
              <Badge className={getRiskBadgeColor(riskScore)}>
                {getRiskLevel(riskScore)}
              </Badge>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Severity Distribution</CardTitle>
            <CardDescription>Vulnerability breakdown by severity level</CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={severityData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {severityData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: '#1f2937', 
                    border: '1px solid #374151',
                    borderRadius: '8px'
                  }}
                />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Risk Assessment</CardTitle>
            <CardDescription>Severity impact analysis</CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={severityData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis 
                  dataKey="name" 
                  stroke="#9ca3af"
                  tick={{ fontSize: 12 }}
                />
                <YAxis stroke="#9ca3af" />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: '#1f2937', 
                    border: '1px solid #374151',
                    borderRadius: '8px'
                  }}
                />
                <Bar dataKey="value" fill="#3b82f6" radius={[4, 4, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Scan Information */}
      <Card className="bg-slate-800/50 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white flex items-center">
            <Clock className="h-5 w-5 mr-2" />
            Scan Information
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div>
              <p className="text-slate-400">Scan Date</p>
              <p className="text-white font-medium">{scanDate.toLocaleDateString()}</p>
            </div>
            <div>
              <p className="text-slate-400">Hosts Scanned</p>
              <p className="text-white font-medium">{hostCount}</p>
            </div>
            <div>
              <p className="text-slate-400">Avg. Vulns per Host</p>
              <p className="text-white font-medium">
                {hostCount > 0 ? (summary.total / hostCount).toFixed(1) : '0'}
              </p>
            </div>
            <div>
              <p className="text-slate-400">Critical Density</p>
              <p className="text-white font-medium">
                {hostCount > 0 ? (summary.critical / hostCount).toFixed(1) : '0'} per host
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

function calculateOverallRiskScore(summary: any): number {
  const weights = { critical: 10, high: 7, medium: 4, low: 1, informational: 0.1 };
  const totalWeightedScore = 
    summary.critical * weights.critical +
    summary.high * weights.high +
    summary.medium * weights.medium +
    summary.low * weights.low +
    summary.informational * weights.informational;
  
  return summary.total > 0 ? totalWeightedScore / summary.total : 0;
}

function getRiskLevel(score: number): string {
  if (score >= 8) return 'Critical Risk';
  if (score >= 6) return 'High Risk';
  if (score >= 4) return 'Medium Risk';
  if (score >= 2) return 'Low Risk';
  return 'Minimal Risk';
}

function getRiskBadgeColor(score: number): string {
  if (score >= 8) return 'bg-red-600 hover:bg-red-700';
  if (score >= 6) return 'bg-orange-600 hover:bg-orange-700';
  if (score >= 4) return 'bg-yellow-600 hover:bg-yellow-700';
  if (score >= 2) return 'bg-blue-600 hover:bg-blue-700';
  return 'bg-green-600 hover:bg-green-700';
}
