
import { useState } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Search, Filter, ArrowUpDown } from 'lucide-react';
import { Vulnerability } from '@/types/vulnerability';

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

export const VulnerabilityTable = ({ vulnerabilities }: VulnerabilityTableProps) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState('all');
  const [sortField, setSortField] = useState<keyof Vulnerability>('cvss');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'bg-red-600 hover:bg-red-700';
      case 'High': return 'bg-orange-600 hover:bg-orange-700';
      case 'Medium': return 'bg-yellow-600 hover:bg-yellow-700';
      case 'Low': return 'bg-green-600 hover:bg-green-700';
      default: return 'bg-gray-600 hover:bg-gray-700';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Open': return 'bg-red-800 text-red-200 border-red-600';
      case 'In Progress': return 'bg-yellow-800 text-yellow-200 border-yellow-600';
      case 'Resolved': return 'bg-green-800 text-green-200 border-green-600';
      case 'Risk Accepted': return 'bg-blue-800 text-blue-200 border-blue-600';
      default: return 'bg-gray-800 text-gray-200 border-gray-600';
    }
  };

  const filteredAndSortedVulns = vulnerabilities
    .filter(vuln => {
      const matchesSearch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           vuln.host.includes(searchTerm) ||
                           vuln.description.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesSeverity = severityFilter === 'all' || vuln.severity === severityFilter;
      return matchesSearch && matchesSeverity;
    })
    .sort((a, b) => {
      const aVal = a[sortField];
      const bVal = b[sortField];
      
      if (sortDirection === 'asc') {
        return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
      } else {
        return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;
      }
    });

  const handleSort = (field: keyof Vulnerability) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };

  const getDaysOld = (date: Date) => {
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - date.getTime());
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  };

  return (
    <div className="space-y-4">
      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
          <Input
            placeholder="Search vulnerabilities..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10 bg-slate-700 border-slate-600 text-white"
          />
        </div>
        <Select value={severityFilter} onValueChange={setSeverityFilter}>
          <SelectTrigger className="w-48 bg-slate-700 border-slate-600 text-white">
            <Filter className="h-4 w-4 mr-2" />
            <SelectValue placeholder="Filter by severity" />
          </SelectTrigger>
          <SelectContent className="bg-slate-700 border-slate-600">
            <SelectItem value="all">All Severities</SelectItem>
            <SelectItem value="Critical">Critical</SelectItem>
            <SelectItem value="High">High</SelectItem>
            <SelectItem value="Medium">Medium</SelectItem>
            <SelectItem value="Low">Low</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Table */}
      <div className="border border-slate-700 rounded-lg overflow-hidden">
        <Table>
          <TableHeader className="bg-slate-800">
            <TableRow className="border-slate-700">
              <TableHead className="text-slate-200">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleSort('title')}
                  className="text-slate-200 hover:text-white hover:bg-slate-700 p-0"
                >
                  Vulnerability
                  <ArrowUpDown className="ml-2 h-4 w-4" />
                </Button>
              </TableHead>
              <TableHead className="text-slate-200">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleSort('severity')}
                  className="text-slate-200 hover:text-white hover:bg-slate-700 p-0"
                >
                  Severity
                  <ArrowUpDown className="ml-2 h-4 w-4" />
                </Button>
              </TableHead>
              <TableHead className="text-slate-200">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleSort('cvss')}
                  className="text-slate-200 hover:text-white hover:bg-slate-700 p-0"
                >
                  CVSS
                  <ArrowUpDown className="ml-2 h-4 w-4" />
                </Button>
              </TableHead>
              <TableHead className="text-slate-200">Host</TableHead>
              <TableHead className="text-slate-200">Age</TableHead>
              <TableHead className="text-slate-200">Status</TableHead>
              <TableHead className="text-slate-200">CVE</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredAndSortedVulns.map((vuln) => (
              <TableRow key={vuln.id} className="border-slate-700 hover:bg-slate-800/50">
                <TableCell className="text-white">
                  <div>
                    <div className="font-medium">{vuln.title}</div>
                    <div className="text-sm text-slate-400">{vuln.category}</div>
                  </div>
                </TableCell>
                <TableCell>
                  <Badge className={getSeverityColor(vuln.severity)}>
                    {vuln.severity}
                  </Badge>
                </TableCell>
                <TableCell className="text-white font-mono">{vuln.cvss}</TableCell>
                <TableCell className="text-white font-mono">
                  {vuln.host}:{vuln.port}
                </TableCell>
                <TableCell className="text-slate-300">
                  {getDaysOld(vuln.discoveredDate)} days
                </TableCell>
                <TableCell>
                  <Badge variant="outline" className={getStatusColor(vuln.status)}>
                    {vuln.status}
                  </Badge>
                </TableCell>
                <TableCell className="text-blue-400 font-mono">
                  {vuln.cve || 'N/A'}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {filteredAndSortedVulns.length === 0 && (
        <div className="text-center py-8 text-slate-400">
          No vulnerabilities found matching your criteria.
        </div>
      )}
    </div>
  );
};
