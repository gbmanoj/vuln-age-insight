
import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Shield, 
  AlertTriangle, 
  Users, 
  FileCheck, 
  Target,
  CheckCircle,
  Clock,
  Flag
} from 'lucide-react';
import { Vulnerability } from '@/types/vulnerability';

interface VulnerabilityAssessmentProps {
  vulnerabilities: Vulnerability[];
  onStatusUpdate: (id: string, status: string, notes?: string) => void;
}

export const VulnerabilityAssessment = ({ vulnerabilities, onStatusUpdate }: VulnerabilityAssessmentProps) => {
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null);
  const [assessmentNotes, setAssessmentNotes] = useState('');
  const [verificationStatus, setVerificationStatus] = useState('');

  const assessmentStats = {
    pending: vulnerabilities.filter(v => v.verificationStatus === 'Pending').length,
    verified: vulnerabilities.filter(v => v.verificationStatus === 'Verified').length,
    failed: vulnerabilities.filter(v => v.verificationStatus === 'Failed').length,
    falsePositives: vulnerabilities.filter(v => v.status === 'False Positive').length
  };

  const getRiskColor = (score: number) => {
    if (score >= 9) return 'text-red-400';
    if (score >= 7) return 'text-orange-400';
    if (score >= 4) return 'text-yellow-400';
    return 'text-green-400';
  };

  const getBusinessImpactColor = (impact: string) => {
    switch (impact) {
      case 'Critical': return 'bg-red-600';
      case 'High': return 'bg-orange-600';
      case 'Medium': return 'bg-yellow-600';
      case 'Low': return 'bg-green-600';
      default: return 'bg-gray-600';
    }
  };

  const handleAssessment = () => {
    if (selectedVuln && verificationStatus) {
      onStatusUpdate(selectedVuln.id, verificationStatus, assessmentNotes);
      setSelectedVuln(null);
      setAssessmentNotes('');
      setVerificationStatus('');
    }
  };

  return (
    <div className="space-y-6">
      {/* Assessment Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-slate-400">Pending Assessment</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <Clock className="h-5 w-5 text-yellow-400" />
              <span className="text-2xl font-bold text-white">{assessmentStats.pending}</span>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-slate-400">Verified</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-5 w-5 text-green-400" />
              <span className="text-2xl font-bold text-white">{assessmentStats.verified}</span>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-slate-400">Failed Verification</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-5 w-5 text-red-400" />
              <span className="text-2xl font-bold text-white">{assessmentStats.failed}</span>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm text-slate-400">False Positives</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <Flag className="h-5 w-5 text-blue-400" />
              <span className="text-2xl font-bold text-white">{assessmentStats.falsePositives}</span>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Vulnerability Queue */}
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Assessment Queue</CardTitle>
            <CardDescription>Vulnerabilities pending assessment</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {vulnerabilities
                .filter(v => v.verificationStatus === 'Pending')
                .slice(0, 10)
                .map((vuln) => (
                <div 
                  key={vuln.id} 
                  className={`p-3 bg-slate-700/50 rounded-lg cursor-pointer transition-colors hover:bg-slate-700 ${
                    selectedVuln?.id === vuln.id ? 'ring-2 ring-blue-500' : ''
                  }`}
                  onClick={() => setSelectedVuln(vuln)}
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="font-medium text-white text-sm">{vuln.title}</div>
                      <div className="text-slate-400 text-xs">{vuln.host}:{vuln.port}</div>
                      <div className="flex items-center space-x-2 mt-2">
                        <Badge className={
                          vuln.severity === 'Critical' ? 'bg-red-600' :
                          vuln.severity === 'High' ? 'bg-orange-600' :
                          vuln.severity === 'Medium' ? 'bg-yellow-600' :
                          'bg-green-600'
                        }>
                          {vuln.severity}
                        </Badge>
                        <span className={`text-sm font-mono ${getRiskColor(vuln.riskScore)}`}>
                          Risk: {vuln.riskScore}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Assessment Panel */}
        <Card className="bg-slate-800/50 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Vulnerability Assessment</CardTitle>
            <CardDescription>
              {selectedVuln ? 'Review and assess selected vulnerability' : 'Select a vulnerability to assess'}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {selectedVuln ? (
              <div className="space-y-4">
                <div className="space-y-2">
                  <h3 className="font-medium text-white">{selectedVuln.title}</h3>
                  <div className="text-sm text-slate-400">{selectedVuln.description}</div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm text-slate-400">CVSS Score</label>
                    <div className="text-white font-mono">{selectedVuln.cvss}</div>
                  </div>
                  <div>
                    <label className="text-sm text-slate-400">Risk Score</label>
                    <div className={`font-mono ${getRiskColor(selectedVuln.riskScore)}`}>
                      {selectedVuln.riskScore}
                    </div>
                  </div>
                  <div>
                    <label className="text-sm text-slate-400">Business Impact</label>
                    <Badge className={getBusinessImpactColor(selectedVuln.businessImpact)}>
                      {selectedVuln.businessImpact}
                    </Badge>
                  </div>
                  <div>
                    <label className="text-sm text-slate-400">Exploitability</label>
                    <div className="text-white">{selectedVuln.exploitability}</div>
                  </div>
                </div>

                <div className="space-y-2">
                  <label className="text-sm text-slate-400">Affected Assets</label>
                  <div className="flex flex-wrap gap-1">
                    {selectedVuln.affectedAssets.map((asset, index) => (
                      <Badge key={index} variant="outline" className="text-xs">
                        {asset}
                      </Badge>
                    ))}
                  </div>
                </div>

                <div className="space-y-2">
                  <label className="text-sm text-slate-400">Compliance Frameworks</label>
                  <div className="flex flex-wrap gap-1">
                    {selectedVuln.complianceFrameworks.map((framework, index) => (
                      <Badge key={index} variant="outline" className="text-xs">
                        {framework}
                      </Badge>
                    ))}
                  </div>
                </div>

                <div className="space-y-2">
                  <label className="text-sm text-slate-400">Assessment Status</label>
                  <Select value={verificationStatus} onValueChange={setVerificationStatus}>
                    <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                      <SelectValue placeholder="Select verification status" />
                    </SelectTrigger>
                    <SelectContent className="bg-slate-700 border-slate-600">
                      <SelectItem value="Verified">Verified - Confirmed vulnerability</SelectItem>
                      <SelectItem value="Failed">Failed - Cannot reproduce</SelectItem>
                      <SelectItem value="False Positive">False Positive</SelectItem>
                      <SelectItem value="Risk Accepted">Risk Accepted</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm text-slate-400">Assessment Notes</label>
                  <Textarea
                    value={assessmentNotes}
                    onChange={(e) => setAssessmentNotes(e.target.value)}
                    placeholder="Add assessment notes, verification steps, or justification..."
                    className="bg-slate-700 border-slate-600 text-white"
                    rows={4}
                  />
                </div>

                <Button 
                  onClick={handleAssessment}
                  disabled={!verificationStatus}
                  className="w-full"
                >
                  Complete Assessment
                </Button>
              </div>
            ) : (
              <div className="text-center text-slate-400 py-8">
                <FileCheck className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p>Select a vulnerability from the queue to begin assessment</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Assessment Progress */}
      <Card className="bg-slate-800/50 border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">Assessment Progress</CardTitle>
          <CardDescription>Overall verification and assessment status</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-slate-300">Verified</span>
                <span className="text-white">{assessmentStats.verified} / {vulnerabilities.length}</span>
              </div>
              <Progress 
                value={(assessmentStats.verified / vulnerabilities.length) * 100} 
                className="h-2" 
              />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-slate-300">Pending Assessment</span>
                <span className="text-white">{assessmentStats.pending} / {vulnerabilities.length}</span>
              </div>
              <Progress 
                value={(assessmentStats.pending / vulnerabilities.length) * 100} 
                className="h-2 bg-yellow-900" 
              />
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
