
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { Vulnerability } from '@/types/vulnerability';

interface VulnerabilityChartProps {
  vulnerabilities: Vulnerability[];
  type?: 'severity' | 'cvss' | 'category';
}

export const VulnerabilityChart = ({ vulnerabilities, type = 'severity' }: VulnerabilityChartProps) => {
  const getSeverityData = () => {
    const counts = {
      Critical: vulnerabilities.filter(v => v.severity === 'Critical').length,
      High: vulnerabilities.filter(v => v.severity === 'High').length,
      Medium: vulnerabilities.filter(v => v.severity === 'Medium').length,
      Low: vulnerabilities.filter(v => v.severity === 'Low').length
    };

    return Object.entries(counts).map(([name, value]) => ({ name, value }));
  };

  const getCVSSData = () => {
    const ranges = {
      'Critical (9.0-10.0)': vulnerabilities.filter(v => v.cvss >= 9.0).length,
      'High (7.0-8.9)': vulnerabilities.filter(v => v.cvss >= 7.0 && v.cvss < 9.0).length,
      'Medium (4.0-6.9)': vulnerabilities.filter(v => v.cvss >= 4.0 && v.cvss < 7.0).length,
      'Low (0.1-3.9)': vulnerabilities.filter(v => v.cvss >= 0.1 && v.cvss < 4.0).length,
    };

    return Object.entries(ranges).map(([name, value]) => ({ name, value }));
  };

  const getCategoryData = () => {
    const categories = vulnerabilities.reduce((acc, vuln) => {
      acc[vuln.category] = (acc[vuln.category] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return Object.entries(categories).map(([name, value]) => ({ name, value }));
  };

  const data = type === 'severity' ? getSeverityData() : 
               type === 'cvss' ? getCVSSData() : 
               getCategoryData();

  const COLORS = {
    'Critical': '#ef4444',
    'High': '#f97316',
    'Medium': '#eab308',
    'Low': '#22c55e',
    'Critical (9.0-10.0)': '#ef4444',
    'High (7.0-8.9)': '#f97316',
    'Medium (4.0-6.9)': '#eab308',
    'Low (0.1-3.9)': '#22c55e',
  };

  const getColor = (name: string, index: number) => {
    return COLORS[name as keyof typeof COLORS] || `hsl(${index * 45}, 70%, 60%)`;
  };

  if (type === 'category') {
    return (
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={data}>
          <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
          <XAxis 
            dataKey="name" 
            stroke="#9ca3af"
            tick={{ fontSize: 12 }}
            angle={-45}
            textAnchor="end"
            height={80}
          />
          <YAxis stroke="#9ca3af" />
          <Tooltip 
            contentStyle={{ 
              backgroundColor: '#1f2937', 
              border: '1px solid #374151',
              borderRadius: '8px'
            }}
          />
          <Bar dataKey="value" fill="#3b82f6" />
        </BarChart>
      </ResponsiveContainer>
    );
  }

  return (
    <ResponsiveContainer width="100%" height={300}>
      <PieChart>
        <Pie
          data={data}
          cx="50%"
          cy="50%"
          labelLine={false}
          label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
          outerRadius={80}
          fill="#8884d8"
          dataKey="value"
        >
          {data.map((entry, index) => (
            <Cell key={`cell-${index}`} fill={getColor(entry.name, index)} />
          ))}
        </Pie>
        <Tooltip 
          contentStyle={{ 
            backgroundColor: '#1f2937', 
            border: '1px solid #374151',
            borderRadius: '8px'
          }}
        />
      </PieChart>
    </ResponsiveContainer>
  );
};
